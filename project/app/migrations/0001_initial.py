# Generated by Django 2.2.4 on 2019-09-05 14:37

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisAnnotatedGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('de_gene', models.CharField(max_length=10)),
                ('log_fc', models.FloatField(null=True)),
                ('log_cpm', models.FloatField(null=True)),
                ('f', models.FloatField(null=True)),
                ('p_value', models.FloatField(null=True)),
                ('fdr', models.FloatField(null=True)),
            ],
            options={
                'verbose_name': 'Analysis Annotated gene',
                'verbose_name_plural': 'Analysis Annotated genes',
                'ordering': ['log_fc', '-p_value', 'de_gene'],
            },
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxid', models.IntegerField(unique=True, verbose_name='Taxonomic ID')),
                ('kingdom', models.CharField(max_length=100)),
                ('phylum', models.CharField(max_length=100)),
                ('tax_class', models.CharField(max_length=100, verbose_name='Class')),
                ('order', models.CharField(max_length=100)),
                ('family', models.CharField(max_length=100)),
                ('scientific_name_with_strain', models.CharField(max_length=300, verbose_name='Scientific name with strain')),
                ('annotation_reference_organism', models.CharField(max_length=300, null=True)),
            ],
            options={
                'verbose_name': 'Organism',
                'verbose_name_plural': 'Organisms',
                'ordering': ['taxid'],
            },
        ),
        migrations.CreateModel(
            name='Pannzer2Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protein_id', models.CharField(max_length=20)),
                ('go_id', models.IntegerField()),
                ('ontology', models.CharField(max_length=5)),
                ('description', models.CharField(max_length=200)),
                ('organism', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Organism', to_field='taxid')),
            ],
            options={
                'verbose_name': 'Pannzer2 Functional annotation',
                'verbose_name_plural': 'Pannzer2 Functional annotations',
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Ortholog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orthogroup', models.CharField(max_length=20)),
                ('orthologs_organism_1', models.CharField(max_length=500)),
                ('orthologs_organism_2', models.CharField(max_length=500)),
                ('organism_1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_1', to='app.Organism')),
                ('organism_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organism_2', to='app.Organism')),
            ],
            options={
                'verbose_name': 'Orthologs',
                'verbose_name_plural': 'Orthologs',
                'ordering': ['orthogroup'],
            },
        ),
        migrations.CreateModel(
            name='GeneCorrespondences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Pannzer2Annotation')),
                ('gene', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.AnalysisAnnotatedGene')),
            ],
            options={
                'verbose_name': 'Gene correspondences',
                'verbose_name_plural': 'Gene correspondences',
                'ordering': ['gene'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentalDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200, unique=True)),
                ('condition_1', models.CharField(max_length=20)),
                ('condition_2', models.CharField(max_length=20)),
                ('replicate_number', models.IntegerField()),
                ('organism', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Organism')),
            ],
        ),
        migrations.AddField(
            model_name='analysisannotatedgene',
            name='experimental_design',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.ExperimentalDesign', to_field='description'),
        ),
        migrations.AddField(
            model_name='analysisannotatedgene',
            name='organism',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.Organism', to_field='taxid'),
        ),
    ]
